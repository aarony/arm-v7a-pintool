/*BEGIN_LEGAL 
#BEGIN_LEGAL
##BEGIN_LEGAL
##INTEL CONFIDENTIAL
##Copyright 2002-2005 Intel Corporation All Rights Reserved.
##
##The source code contained or described herein and all documents
##related to the source code (Material) are owned by Intel Corporation
##or its suppliers or licensors. Title to the Material remains with
##Intel Corporation or its suppliers and licensors. The Material may
##contain trade secrets and proprietary and confidential information of
##Intel Corporation and its suppliers and licensors, and is protected by
##worldwide copyright and trade secret laws and treaty provisions. No
##part of the Material may be used, copied, reproduced, modified,
##published, uploaded, posted, transmitted, distributed, or disclosed in
##any way without Intels prior express written permission.  No license
##under any patent, copyright, trade secret or other intellectual
##property right is granted to or conferred upon you by disclosure or
##delivery of the Materials, either expressly, by implication,
##inducement, estoppel or otherwise. Any license under such intellectual
##property rights must be express and approved by Intel in writing.
##
##Unless otherwise agreed by Intel in writing, you may not remove or
##alter this notice or any other notice embedded in Materials by Intel
##or Intels suppliers or licensors in any way.
##END_LEGAL
#INTEL CONFIDENTIAL
#Copyright 2002-2005 Intel Corporation All Rights Reserved.
#
#The source code contained or described herein and all documents
#related to the source code (Material) are owned by Intel Corporation
#or its suppliers or licensors. Title to the Material remains with
#Intel Corporation or its suppliers and licensors. The Material may
#contain trade secrets and proprietary and confidential information of
#Intel Corporation and its suppliers and licensors, and is protected by
#worldwide copyright and trade secret laws and treaty provisions. No
#part of the Material may be used, copied, reproduced, modified,
#published, uploaded, posted, transmitted, distributed, or disclosed in
#any way without Intels prior express written permission.  No license
#under any patent, copyright, trade secret or other intellectual
#property right is granted to or conferred upon you by disclosure or
#delivery of the Materials, either expressly, by implication,
#inducement, estoppel or otherwise. Any license under such intellectual
#property rights must be express and approved by Intel in writing.
#
#Unless otherwise agreed by Intel in writing, you may not remove or
#alter this notice or any other notice embedded in Materials by Intel
#or Intels suppliers or licensors in any way.
#END_LEGAL
Intel Open Source License 

Copyright (c) 2002-2005 Intel Corporation 
All rights reserved. 
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.  Redistributions
in binary form must reproduce the above copyright notice, this list of
conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.  Neither the name of
the Intel Corporation nor the names of its contributors may be used to
endorse or promote products derived from this software without
specific prior written permission.
 
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE INTEL OR
ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
END_LEGAL */
/*
**
** @ORIGINAL_AUTHOR: Robert Muth
*/

/*! @file
  this headerfile contains defines the (additional) types needed by @ref LEVEL_BASE
 */

/*
** This file is also included by c files, so do not introduce any C++ stuff in here.
** For example, do not use C++ style comments
*/

#ifndef TYPES_BASE_H
#define TYPES_BASE_H

typedef unsigned char BOOL;
#define TRUE 1
#define B_VERBOSE 1
#define B_BRIEF 0  
#define FALSE 0

/* VOID is defined on winnt.h and winloader includes that */
#if !defined(VOID)
typedef void VOID; 
#endif
typedef char CHAR;


#if !defined( __GNUC__) &&  defined(_WIN32)
 typedef unsigned __int8 UINT8 ;
 typedef unsigned __int16 UINT16;
 typedef unsigned __int32 UINT32;
 typedef unsigned __int64 UINT64;
 typedef __int8 INT8;
 typedef __int16 INT16;
 typedef __int32 INT32;
 typedef __int64 INT64;
  // MS compilers pull in UINT from WinDef.h
 typedef unsigned int UINT;
#else

typedef uint8_t  UINT8;   //LINUX HOSTS
typedef uint16_t UINT16;
typedef uint32_t UINT32;
typedef uint64_t UINT64;

typedef int8_t  INT8;
typedef int16_t INT16;
typedef int32_t INT32;
typedef int64_t INT64;

typedef unsigned int UINT;
typedef int INT;
# endif


typedef double FLT64;
typedef float  FLT32;

typedef VOID (*AFUNPTR)();
typedef VOID *(*THREAD_STARTROUTINE)(void *);
typedef VOID (*DESTRUCTFUN)(void*);

/*
** unsigned integer of the same size as a pointer on the TARGET architecture
** this quantity can be converted to and from an OADDR/IADDR
*/
#if defined(TARGET_IA32)
typedef UINT32 ADDRINT;
typedef INT32 ADDRDELTA;

#elif defined(TARGET_IPF) || defined(TARGET_IA32E) || defined(TARGET_P14)
typedef UINT64 ADDRINT;
typedef INT64 ADDRDELTA;

#elif defined(TARGET_ARM)
typedef UINT32 ADDRINT;
typedef INT32 ADDRDELTA;

#elif defined(TARGET_DOXYGEN)
/*! @ingroup TYPES_BASE
  An integer big enough to hold a pointer
*/
typedef xxx ADDRINT;
typedef xxx ADDRDELTA;

#else
#error "wwwwwwwwwwwwwwwwwwwwwwwwwwww"
#endif

#if defined(HOST_IA32) || defined (HOST_ARM)
typedef UINT32 VOIDINT;
#elif defined(HOST_IPF) || defined(HOST_IA32E)
typedef UINT64 VOIDINT;
#else
typedef ADDRINT VOIDINT;
#endif

/*! @ingroup TYPES_BASE
  Used to hold a size
*/
typedef unsigned int USIZE;
typedef signed int   SIZE;

static inline USIZE USIZE_INVALID() {return ~(0L);}

#ifdef __GNUC__
#define STRTOUINT64 strtoull
#define STRTOINT64  strtoll
#else
#define STRTOUINT64 strtoul
#define STRTOINT64  strtol
#endif

#define STRTOFLT64  strtod

#define NIL ((void *) -1L)

#define MAX(a, b) (((a)>(b))?(a) : (b))
#define MIN(a, b) (((a)<(b))?(a) : (b))

/*
** this hack allows for better utilization of the base ins stripe.
*/

typedef UINT16 OPCODE;
#if !defined(TARGET_P14)
static inline  OPCODE OPCODE_INVALID() {return  0;}
static inline BOOL OPCODE_valid(OPCODE opc){ return opc != 0;}
#endif

#if defined(TARGET_LINUX) || defined(TARGET_BSD) || defined(TARGET_MAC)
#define KNOB_ONLY_ON_UNIX "1"
#else
#define KNOB_ONLY_ON_UNIX "0"
#endif

#if defined(TARGET_MAC)
#define KNOB_ONLY_ON_MAC "1"
#else
#define KNOB_ONLY_ON_MAC "0"
#endif

#if defined(TARGET_IA32) || defined(TARGET_IA32E)
#define KNOB_ONLY_ON_IA32_IA32E "1"
#else
#define KNOB_ONLY_ON_IA32_IA32E "0"
#endif

#if defined(TARGET_IA32E) || defined(TARGET_IPF)
#define KNOB_ONLY_ON_IA32E_IPF "1"
#else
#define KNOB_ONLY_ON_IA32E_IPF "0"
#endif

#if defined(TARGET_IPF)
#define KNOB_ONLY_ON_IPF "1"
#define KNOB_ONLY_OFF_IPF "0"
#else
#define KNOB_ONLY_ON_IPF "0"
#define KNOB_ONLY_OFF_IPF "1"
#endif

#if defined(TARGET_IPF) || defined(TARGET_WINDOWS)
#define KNOB_ONLY_ON_IPF_WIN "1"
#else
#define KNOB_ONLY_ON_IPF_WIN "0"
#endif

#if (defined(TARGET_IA32) || defined(TARGET_IA32E)) && defined(TARGET_LINUX)
#define KNOB_ONLY_ON_IA32_IA32E_LINUX "1"
#else
#define KNOB_ONLY_ON_IA32_IA32E_LINUX "0"
#endif


#if defined(TARGET_ARM) && defined(TARGET_LINUX)
#define KNOB_ONLY_OFF_ARM_LINUX "0"
#else
#define KNOB_ONLY_OFF_ARM_LINUX "1"
#endif

#if defined(TARGET_ARM) && defined(TARGET_LINUX)
#define KNOB_ONLY_ON_ARM_LINUX "1"
#else
#define KNOB_ONLY_ON_ARM_LINUX "0"
#endif

/*! @ingroup PTRACE
  x
*/

#if defined(TARGET_MAC)

// For Mach-O
typedef struct 
{
    // Name of the dynamic loader
    const CHAR *_loaderFname;
    
    VOID *_pinclientint;
    CHAR *_charmversion;

    // preferred virtual address of the first segment mapped (not including the Pagezero segment)
    ADDRINT _preferredStartAddr;

    // This is the location that the miniloader will store the actualLoadAddr
    ADDRINT * _actualStartAddrLoc;
    
    // actual virtual address of the first segment mapped
    ADDRINT _actualStartAddr;
    
    // preferred virtual address of the very first instruction executed
    ADDRINT _preferredEntryAddr;

    // preferred address of the location where the header of this image is mapped to
    ADDRINT _preferredMhAddr;
    
} ImageLoaderInfo;

#else

// For ElF
typedef struct 
{
    ADDRINT _brk;
    ADDRINT _phdr;
    ADDRINT _entry;
    UINT32 _phnum;
    const CHAR *_loaderFname;
    VOID *_pinclientint;
    CHAR *_charmversion;

    // This is the location that the miniloader will store the load offset
    ADDRINT * _loadOffsetLoc;

    // Load offset will be copied from LoadOffsetLoc to here
    // We need to copy because miniloader may not run in same address space
    ADDRINT _loadOffset;

} ImageLoaderInfo;
#endif

#define SYSCALL syscall

#endif
